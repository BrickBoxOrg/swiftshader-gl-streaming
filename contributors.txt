* The Little Body @OpenGL forum 10-25-2013, 06:54 PM

http://www.opengl.org/discussion_boards/showthread.php/182966-gl-streaming-Lightweight-OpenGL-ES-command-streaming-framework?p=1255732&viewfull=1#post1255732

This can work from a Linux box to another Linux box for that I make some tests ?
(I does not have a Raspberry Pi )

The GLS_POINTER / GLS_PUSH scheme can to be a little more ehanced for to make a more compact source code :
(but any gain about the size or speed of the binary executable code because this only use #define)

#define GLS_PTR_FUNC(PTR, FUNC) gls_FUNC_t *PTR = (gls_FUNC_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr); \
PTR->cmd = GLSC_FUNC;
 
#define GLS_PUSH_FUNC(FUNC) push_batch_command(sizeof(gls_FUNC_t))
 
 
GL_APICALL void GL_APIENTRY glBindBuffer (GLenum target, GLuint buffer)
{
  GLS_POINTER_FUNC(c, glBindBuffer);
 
  c->target = target; 
  c->buffer = buffer;
 
  GLS_PUSH_FUNC(glBindBuffer);
}



----------------------------------------------------------------



* The Little Body @OpenGL forum 10-25-2013, 06:11 PM

http://www.opengl.org/discussion_boards/showthread.php/182966-gl-streaming-Lightweight-OpenGL-ES-command-streaming-framework?p=1255730&viewfull=1#post1255730

I see too in gl_client/glclient.c a lot of deported glFuncs with systematicaly a very similar first line of code :

gls_glBindBuffer_t *c = (gls_glBindBuffer_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr);
gls_glBlendFuncSeparate_t *c = (gls_glBlendFuncSeparate_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr);
...
gls_glDrawElements_t *c = (gls_glDrawElements_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr);
gls_glBindAttribLocation_t *c = (gls_glBindAttribLocation_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr);

=> I think that this can to be replaced with a more generic #define pattern like this :

#define GLS_POINTER(PTR, FUNC) gls_FUNC_t *PTR = (gls_FUNC_t *)(glsc_global.tmp_buf.buf + glsc_global.tmp_buf.ptr)

The same thing about push_batch_command() calls that can use this #define for example

#define GLS_PUSH(FUNC) push_batch_command(sizeof(gls_FUNC_t))

and push_batch_command() calls to be generated by this #define

GLS_PUSH(glBindBuffer);
...
GLS_PUSH(glUniform1f);
...
GLS_PUSH(command);

This make a very more compact source code for the deported glBindBuffer() call by example :

GL_APICALL void GL_APIENTRY glBindBuffer (GLenum target, GLuint buffer)
 
{
 
  GLS_POINTER(c, glBindBuffer);
 
  c->cmd = GLSC_glBindBuffer;
 
  c->target = target;
 
  c->buffer = buffer;
 
  GLS_PUSH(glBindBuffer);
 
}
----------------------------------------------------------------



* The Little Body @OpenGL forum 10-23-2013, 02:31 PM


http://www.opengl.org/discussion_boards/showthread.php/182966-gl-streaming-Lightweight-OpenGL-ES-command-streaming-framework?p=1255697&viewfull=1#post1255697

And about to regroup set_server_adress/set_server_port and set_client_adress/set_client_port ?

void set_server_address_port(server_context_t *c, char * addr, uint16_t port)
 
{
 
  strncpy(c->server_thread_arg.addr, addr, sizeof(c->server_thread_arg.addr));
 
  c->server_thread_arg.port = port;
 
}
 
 
void set_client_address_port(server_context_t *c, char * addr,  uint16_t port)
 
{
 
  strncpy(c->popper_thread_arg.addr, addr, sizeof(c->popper_thread_arg.addr));
 
  c->popper_thread_arg.port = port;
 
}

----------------------------------------------------------------


